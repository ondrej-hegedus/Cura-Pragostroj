name: Benchmark

on:
  workflow_call:
    inputs:
      recipe_id_full:
        required: true
        type: string

      conan_extra_args:
        required: false
        default: ""
        type: string

      benchmark_cmd:
        required: true
        type: string

      name:
        required: true
        type: string

      output_file_path:
        required: true
        type: string

      data_dir:
        required: true
        type: string

      tool:
        required: true
        type: string

      conan_internal:
        required: false
        default: false
        type: boolean

      alert_comment_cc_users:
        required: false
        default: ""
        type: string

      alert_threshold:
        required: false
        default: "150%"
        type: string

permissions:
  contents: write
  deployments: write

env:
  CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_USER }}
  CONAN_PASSWORD: ${{ secrets.CONAN_PASS }}
  SENTRY_TOKEN: ${{ secrets.CURAENGINE_SENTRY_TOKEN }}

jobs:
  benchmark:
    name: Run benchmark
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
        with:
          fetch-depth: 1
          ref: ${{ github.head_ref }}

      - name: Checkout repo PR
        uses: actions/checkout@v4
        if: ${{ github.event.pull_request.head.repo.full_name != github.repository }}
        with:
          fetch-depth: 1
          ref: ${{ github.base_ref }}

      - name: Sync pip requirements
        run: wget https://raw.githubusercontent.com/Ultimaker/cura-workflows/main/.github/workflows/requirements-runner.txt -O .github/workflows/requirements-runner.txt

      - name: Setup Python and pip
        uses: actions/setup-python@v4
        with:
          python-version: 3.11.x
          cache: pip
          cache-dependency-path: .github/workflows/requirements-runner.txt

      - name: Install Python requirements and Create default Conan profile
        run: pip install -r .github/workflows/requirements-runner.txt

      - name: Install Linux system requirements for building
        run: |
          mkdir runner_scripts
          wget https://raw.githubusercontent.com/Ultimaker/cura-workflows/main/runner_scripts/ubuntu_setup.sh -O runner_scripts/ubuntu_setup.sh
          chmod +x runner_scripts/ubuntu_setup.sh
          sudo ./runner_scripts/ubuntu_setup.sh

      - name: Setup pipeline caches
        run: |
          mkdir -p /home/runner/.conan/downloads
          mkdir -p /home/runner/.conan/data

      - name: Create default Conan profile
        run: conan profile new default --detect

      - name: Get Conan configuration
        run: |
          conan config install https://github.com/Ultimaker/conan-config.git
          conan config install https://github.com/Ultimaker/conan-config.git -a "-b runner/${{ runner.os }}/${{ runner.arch }}"

      - name: Add runner credentials to cura remote
        run: conan user -p ${{ secrets.CONAN_PASS }} -r cura ${{ secrets.CONAN_USER }}

      - name: Add Cura private Artifactory remote
        if: ${{ inputs.conan_internal }}
        run: |
          conan config install https://github.com/Ultimaker/conan-config.git -a "-b runner/internal"
          conan user -p ${{ secrets.CONAN_PASS }} -r cura-private ${{ secrets.CONAN_USER }}

      - name: Cache Conan packages
        uses: actions/cache@v3
        with:
          path: /home/runner/.conan/data
          key: ${{ runner.os }}-conan-data-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-conan-data-

      - name: Cache Conan downloads
        uses: actions/cache@v3
        with:
          path: /home/runner/.conan/downloads
          key: ${{ runner.os }}-conan-downloads-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-conan-downloads-

      - name: Install dependencies
        run: conan install . ${{ inputs.recipe_id_full }} -s build_type=Release --build=missing --update -g GitHubActionsRunEnv -g GitHubActionsBuildEnv ${{ inputs.conan_extra_args }}

      - name: Set Environment variables from Conan install (bash)
        if: ${{ runner.os != 'Windows' }}
        run: |
          . ./activate_github_actions_runenv.sh
          . ./activate_github_actions_buildenv.sh
        working-directory: build/Release/generators

      - name: Build
        run: |
          cmake --preset release
          cmake --build --preset release

      - name: Run benchmark
        id: run-test
        run: ${{ inputs.benchmark_cmd  }}
        working-directory: build/Release

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: ${{ inputs.name }}
          output-file-path: ${{ inputs.output_file_path }}
          gh-repository: github.com/Ultimaker/CuraEngineBenchmarks
          gh-pages-branch: main
          benchmark-data-dir-path: ${{ inputs.data_dir }}
          tool: ${{ inputs.tool }}
          github-token: ${{ secrets.CURA_BENCHMARK_PAT }}
          auto-push: true
          max-items-in-chart: 250
          alert-threshold: ${{ inputs.alert_threshold }}
          comment-on-alert: ${{ inputs.alert_comment_cc_users != '' }}
          alert-comment-cc-users: ${{ inputs.alert_comment_cc_users }}
