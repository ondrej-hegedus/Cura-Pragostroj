name: Linux Installer
run-name: ${{ inputs.cura_conan_version }} for Linux-${{ inputs.architecture }} by @${{ github.actor }}

on:
  workflow_call:
    inputs:
      cura_conan_version:
        description: 'Cura Conan Version'
        default: ''
        required: true
        type: string

      conan_args:
        description: 'Conan args: eq.: --require-override'
        default: ''
        required: false
        type: string

      enterprise:
        description: 'Build Cura as an Enterprise edition'
        default: false
        required: true
        type: boolean

      staging:
        description: 'Use staging API'
        default: false
        required: true
        type: boolean

      architecture:
        description: 'Architecture'
        required: true
        default: 'X64'
        type: string

      operating_system:
        description: 'OS'
        required: true
        default: 'ubuntu-22.04'
        type: string

      # conan_internal:
      #   required: false
      #   default: false
      #   type: boolean

permissions:
  contents: read

env:
  CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_USER }}
  CONAN_PASSWORD: ${{ secrets.CONAN_PASS }}
  GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  CURA_CONAN_VERSION: ${{ inputs.cura_conan_version }}
  ENTERPRISE: ${{ inputs.enterprise }}
  STAGING: ${{ inputs.staging }}
  SENTRY_TOKEN: ${{ secrets.CURAENGINE_SENTRY_TOKEN }}

jobs:
  cura-installer-create:
    runs-on: ${{ inputs.operating_system }}

    steps:
      - name: Checkout Cura repo
        uses: actions/checkout@v4
        with:
          # repository: Ultimaker/Cura
          repository: ondrej-hegedus/Cura-Pragostroj

      # - name: Checkout Cura-workflows repo
      #   uses: actions/checkout@v4
      #   with:
      #     repository: Ultimaker/Cura-workflows
      #     path: Cura-workflows

      - name: Setup Python and pip
        uses: actions/setup-python@v5.1.0
        with:
          python-version: 3.11.x
          cache: pip
          cache-dependency-path: .github/workflows/requirements-runner.txt

      -   name: Install Python requirements for - create
          run: pip install -r .github/workflows/requirements-conan-package.txt

      - name: Install Python requirements for - install
        run: pip install -r .github/workflows/requirements-runner.txt

      - name: Install Linux system requirements for building
        working-directory: .github/workflows/runner_scripts
        run: |
          chmod +x ubuntu_setup.sh
          sudo ./ubuntu_setup.sh

      - name: Install Linux system requirements for - create
        run: |
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
            sudo apt update
            sudo apt upgrade
            sudo apt install build-essential checkinstall libegl-dev zlib1g-dev libssl-dev ninja-build autoconf libx11-dev libx11-xcb-dev libfontenc-dev libice-dev libsm-dev libxau-dev libxaw7-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxdmcp-dev libxext-dev libxfixes-dev libxi-dev libxinerama-dev libxkbfile-dev libxmu-dev libxmuu-dev libxpm-dev libxrandr-dev libxrender-dev libxres-dev libxss-dev libxt-dev libxtst-dev libxv-dev libxvmc-dev libxxf86vm-dev xtrans-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev xkb-data libxcb-dri3-dev uuid-dev libxcb-util-dev libxkbcommon-x11-dev pkg-config -y

      -   name: Install GCC-12 on ubuntu-22.04
          # if: ${{ startsWith(inputs.runs_on, 'ubuntu-22.04') }}
          run: |
              sudo apt install g++-12 gcc-12 -y
              sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 12
              sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 12

      - name: Install AppImage builder
        run: |
          chmod +x ./.github/workflows/runner_scripts/appimage_setup.sh
          ./.github/workflows/runner_scripts/appimage_setup.sh

      - name: Setup pipeline caches
        run: mkdir -p /home/runner/.conan/downloads

      - name: Create default Conan profile
        run: conan profile new default --detect --force

      - name: Get Conan configuration
        run: |
          conan config install ./conan-configs/common/
          conan config install ./conan-configs/linux-x64/
      # - name: Add runner credentials to cura remote
      #   run: conan user -p ${{ secrets.CONAN_PASS }} -r cura ${{ secrets.CONAN_USER }}

      # - name: Add Cura private Artifactory remote
      #   if: ${{ inputs.conan_internal }}
      #   run: |
      #     conan config install https://github.com/Ultimaker/conan-config.git -a "-b runner/internal"
      #     conan user -p ${{ secrets.CONAN_PASS }} -r cura-private ${{ secrets.CONAN_USER }}

      # - name: Cache Conan downloads
      #   uses: actions/cache@v3
      #   with:
      #     path: /home/runner/.conan/downloads
      #     key: ${{ runner.os }}-conan-downloads-${{ github.run_id }}
      #     restore-keys: |
      #       ${{ runner.os }}-conan-downloads-

      - name: Conan search
        run: conan search "*"

      - name: Configure GPG Key Linux (Bash)
        run: echo -n "$GPG_PRIVATE_KEY" | base64 --decode | gpg --import

      - name: Install the Packages (install)
        # run: conan install $CURA_CONAN_VERSION ${{ inputs.conan_args }} --build=missing --update -if cura_inst -g VirtualPythonEnv -o cura:enterprise=$ENTERPRISE -o cura:staging=$STAGING  -o cura:internal=False -c tools.build:skip_test=True -s curaengine:build_type=RelWithDebInfo -s arcus:build_type=RelWithDebInfo -s clipper:build_type=RelWithDebInfo
        run: conan install . ${{ inputs.conan_args }} --build=missing --update -if cura_inst -g VirtualPythonEnv -o cura:enterprise=$ENTERPRISE -o cura:staging=$STAGING  -o cura:internal=False -c tools.build:skip_test=True -s curaengine:build_type=RelWithDebInfo -s arcus:build_type=RelWithDebInfo -s clipper:build_type=RelWithDebInfo

      - name: Create the Packages (create)
        run: conan create . $CURA_CONAN_VERSION --build=missing --update

      - name: Set Environment variables for Cura (bash)
        run: |
          . ./cura_inst/bin/activate_github_actions_env.sh
          . ./cura_inst/bin/activate_github_actions_version_env.sh

      - name: Create the Cura dist
        run: pyinstaller ./cura_inst/UltiMaker-Cura.spec

      - name: Output the name file name and extension
        id: filename
        run: python .github/workflows/runner_scripts/cura_installer_filename.py --os ${{ runner.os }} --arch ${{ inputs.architecture }} --enterprise ${{ inputs.enterprise }} --internal ${{ inputs.conan_internal }}

      - name: Summarize the used dependencies
        run: python .github/workflows/runner_scripts/summarize_used_dependencies.py --installer_filename ${{ steps.filename.outputs.INSTALLER_FILENAME }}

      - name: Create the Linux AppImage (Bash)
        run: |
          python ../cura_inst/packaging/AppImage-builder/create_appimage.py ./UltiMaker-Cura $CURA_VERSION_FULL "${{ steps.filename.outputs.INSTALLER_FILENAME }}.AppImage"
          chmod +x "${{ steps.filename.outputs.INSTALLER_FILENAME }}.AppImage"
        working-directory: dist
        
      - name: LS CWD
        run: ls -a
      - name: TREE CWD
        run: tree -L 3 .
      - name: TREE cura_inst
        run: tree -L 3 cura_inst
      - name: TREE dist
        run: tree -L 4 dist

      # - name: Upload the lib(std)c(++) debug symbols
      #   run: |
      #     find AppDir/ -name 'libc.*' -exec sentry-cli --auth-token $SENTRY_TOKEN debug-files upload {} \;
      #     find AppDir/ -name 'libstdc++.*' -exec sentry-cli --auth-token $SENTRY_TOKEN debug-files upload {} \;
      #   working-directory: dist

      - name: Remove internal packages before uploading
        run: |
          conan remove "*@internal/*" -f || true
          conan remove "cura_private_data*" -f || true

      # - name: Upload the Package(s)
      #   if: ${{ always() && ! inputs.conan_internal }}
      #   run: conan upload "*" -r cura --all -c

      - name: Upload the AppImage
        uses: actions/upload-artifact@v4.3.3
        with:
          name: ${{ steps.filename.outputs.INSTALLER_FILENAME }}-AppImage
          path: |
            dist/${{ steps.filename.outputs.INSTALLER_FILENAME }}.AppImage
          retention-days: 5

      - name: Upload the asc
        uses: actions/upload-artifact@v4.3.3
        with:
          name: ${{ steps.filename.outputs.INSTALLER_FILENAME }}-asc
          path: |
            dist/${{ steps.filename.outputs.INSTALLER_FILENAME }}.AppImage.asc
          retention-days: 5

      - name: Write the run info
        shell: python
        run: |
          import os
          with open("run_info.sh", "w") as f:
              f.writelines(f'echo "CURA_VERSION_FULL={os.environ["CURA_VERSION_FULL"]}" >> $GITHUB_ENV\n')

      - name: Upload the run info
        uses: actions/upload-artifact@v4.3.3
        with:
          name: linux-run-info
          path: |
            run_info.sh
          retention-days: 5

